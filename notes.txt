//NOTES

/**
 * 1) import { Provider } from "react-redux";
 * -wrap the App component in the render with the Provider
 *
 * 2) Go to App component.
 *
 * Add method mapStateToProps
 * mapStateToProps means which properties of my global application state, do I want to use in this component, and to
 * which local properties in this component do I want to map them
 *
 * //this gets the state passed from Redux
 * //return a key value pair where key is a property name that you can use in your component
 *
 * //the names will be whatever you assigned to them in your combinedReducers I believe
 * //in the case below we are using all the properties from the global state. this will allow you to simply now pass
 * their properties in as a prop to a component. i.e) <CampusList campuses = {this.props.campuses} />
 *
 * const mapStateToProps = (state) => {
 *  return {
 *      students: state.students,
 *      campuses: state.campuses
 * }
 * }
 *
 * const mapDispatchToProps = (dispatch) =>{
 *
 *  return {
 *  addStudent: (student) =>{
 *      dispatch(addStudent(student))  //you can import this as an action creator I believe. Do I need to pass in student as well?
 *      }
 *     }
 * }
 *
 * OR IS IT THE PROPER WAY TO DO IT AS
 *
 * return {
 *  addStudent:(student) => {
 *  dispatch({
 *      type:"ADD_STUDENT",
 *       payload: student
 *          })
 *      }
 *  }
 *
 *
 *
 *
 *
 * //connect needs to be imported from 'react-redux'
 *
 * 3) call connect function to connect reactjs with redux for your component to have access to the store with the mapStateToProps
 *
 * export default connect(mapStateToProps, mapDispatchToProps)(App);
 *
 * Why are we calling the connect function? We are calling the connect function because we want to tell react-redux
 * that I want to connect this component here to my redux store.
 * I am already providing the store to the whole application, but it doesn't mean it will connect to all of your components.
 *
 * This is useful because you can choose which properties and actions you want to choose. This is done with the mapStateToProps
 * and mapDispatchToProps
 *
 *
 * mapStateToProps tells reactJs which properties of the global state do I want to use in this component, and to which
 * local properties accessible to the props keyword (i.e) this.props.students , do I want to map the keyword to.
 *
 * mapDispatchToProps does the same but not for the properties but for the actions I can execute and send to reducers.
 *
 * We can map key value pairs here which will also be accessible with this.props, but we are mapping functions that dispatch
 * an action that we will use in this app.
 *
 *
 * NOTE: You don't have to connect Redux store with every component, if for simple things, you can still pass it down
 * as a sub component.
 *


 Only use redux if you need to. If you are creating a student there is most likely not a reason to use the redux store because we are 
 not going to be grabbing the new data. The point of the form is to post a new student or campus. The thunk that fetches the students 
 and campuses is handled elsewhere so the form component need not worry bout that. 



 //Why do I have to dispatch the thunk that is related to this student in order for it to hard refresh my page (UpateStudent.js)

 TODO: Get a better understanding of how redux store makes state re-render
 

 maybe make description not required later for updateCampus.js 

 //whatever the action handler is trying to take care of, is the fetch call association we need to make, cause technically I guess that makes 
 sense if the other information doesn't change regardless of if its fetched again. if you delete a student, the reference address to the campuses 
 is still the same if they are an object, which in our case they are, thus even if we change things inside the reference address, there won't be a state 
 change unless we pass in a new reference address. 



Instead of fetching for the campuses on the createStudent, I could just do a fetch for the campuses on the student list so that I would have 
access to whichever campuses that were available in the case where I wanted to add a student to a select campus based off that campus id, 
which I could do by setting a select tag with options based off the campus names which I could probably do in a map of option tags inside of
a select tag. Afterwards upon submit, I would make the student I am creating's Id equal to the campusId with a campus.find() function to find the 
matching respective Id. 


I could also probably on the singleCampus page, have an addStudent form, which would add a student directly to this campus, rather than the 
all campuses component where I would give an option to pick a campus to add to. This would be possible because we would have our campus which is 
going to be the object that is fetched by our initial thunk and stored in our state so we could just take the campus id from there and assign it 
to whatever student we plan on adding. Cool. 


StudentList 

THE REASON WHY THE PAGE DIDN'T RERENDER WAS BECAUSE SURE I HAD DELETED THE STUDENT IN MY DATABASE, BUT UNTIL I DO A FETCH STUDENTS, THE 
STUDENTS THAT ARE ON THE PAGE WON'T BE UPDATED WITH THE NEW BATCH OF STUDENTS, SO IT IN A SENSE STILL SHOWED THE SAME STUDENTS! THE PAGE 
WAS RERENDERING BUT THE STUDENTS WASN'T UPDATED SINCE AFTER DELETING THE STUDENTS I HAD TO FETCH THEM AGAIN AND BECAUSE OF THAT WHEN I DID
THE FETCH STUDENTS AGAIN IT UPDATED THE PAGE. THE STUDENTS WERE NOT UPDATED SO THE SAME STUDENTS WERE SHOWN THE WHOLE TIME!!!



SINGLE CAMPUS 

THE REASON WHY WE HAVE ACCESS TO THE CAMPUS IS BECAUSE SINCE I CALL IS BECAUSE I DON'T HAVE A COMPONENT DID UNMOUNT SO NO REFRESH OCCURS, 
WHICH IS WHY THE STATE CAN BE ACCESSED BY THE UPDATECAMPUS PAGE. IF I HAD SOME SORT OF UNMOUNT IT WOULD BE USEFUL FOR THINGS LIKE WHERE SAY 
I HAVE A SETTIMEOUT THAT SHOWS AN INCREMENTER ON THE SCREEN AND AFTER LIKE THE NUMBER INCREMENTS BY LIKE 10, I DON'T WANT TO SHOW IT ANYMORE
THATS WHEN I WOULD USE COMPONENTWILLUNMOUNT SO THAT I DON'T HAVE TO CONTINUE SEEING THAT ANYMORE. 

I WAS ABLE TO ACCESS FROM STORE BECAUSE THE COMPONENT WAS ON THE SAME PAGE THAT THE UPDATECAMPUS WAS LOADED ONTO SO THEY WERE ABLE TO SHARE
THE REDUX STORE. I AM PRETTY SURE THAT IS HOW IT WENT. 


 */

UPDATE CAMPUS ISSUE FIX

-I PASSED DOWN THE PROPS WHICH GAVE ME THE HISTORY FROM WHICH I GRABBED THE PARAMS I NEEDED FOR MY CAMPUS ID THAT I NEEDED TO FETCH, 
WHICH I FETCHED WITH MY THUNK AFTER THAT. THE REASON IT WASN'T WORKING BEFORE WAS BECAUSE IN MY THUNK I WAS TRYING TO FETCH AN ID THAT
HADN'T BEEN IN MY PROPS FOR SOME REASON. IT WOULD BE INTERESTING THOUGH TO FIGURE OUT WHY THE PROPS DIDN'T HAVE THE ID OF THE SINGLE CAMPUS 
IN THEM IN THE REDUX STORE THAT TYPICALLY SHOULD HAVE BEEN SHARED. BUT GOOD JOB FIGURING OUT THIS WAY TO IT. YOU ARE A G. 



/*
CREATESTUDENT.js



//we will make this a class that has it's own state so that we can store what the user is giving us. We don't need to use the redux store for this component

import React, { Component } from "react";
import { connect } from "react-redux";
import { fetchStudents } from "../../actions";
import axios from "axios";
import "../App.css";

class CreateStudent extends Component {
  constructor(props) {
    super(props);

    //IF AN ERROR PERSIST LATER, REMEMBER WE TOOK OUT imageUrl for now in the this.state below

    this.state = {
      firstName: "",
      lastName: "",
      email: "",
      gpa: "",
      showForm: false,
      // campus: "",
    };
  }

  createStudentHandler = (event) => {
    this.setState({
      [event.target.name]: event.target.value,
    });
  };

  toggleForm = () => {
    this.setState({
      showForm: !this.state.showForm,
    });
  };

  submitStudentHandler = async (event) => {
    event.preventDefault();

    const student = (
      await axios.post("/api/students", {
        firstName: this.state.firstName,
        lastName: this.state.lastName,
        email: this.state.email,
        gpa: this.state.gpa,
      })
    ).data;

    this.setState({
      firstName: "",
      lastName: "",
      email: "",
      gpa: "",
    });

    this.props.fetchStudents();
  };

  render() {
    let formValue = (
      <div
        style={{
          width: "30rem",
          backgroundColor: "lightgray",
          border: "2px solid black",
        }}
      >
        <h3 style={{ backgroundColor: "red", display: "inline-block" }}>
          ADD STUDENT FORM
        </h3>
        <form onSubmit={this.submitStudentHandler}>
          <div>
            <label>First Name:</label>
            <input
              type="text"
              name="firstName"
              value={this.state.firstName}
              onChange={this.createStudentHandler}
              required
            />
            <label>Last Name:</label>
            <input
              name="lastName"
              type="text"
              value={this.state.lastName}
              onChange={this.createStudentHandler}
              required
            />
            <label>Email:</label>
            <input
              name="email"
              type="text"
              value={this.state.email}
              onChange={this.createStudentHandler}
              required
            />
            <label>GPA: </label>
            <input
              name="gpa"
              type="text"
              value={this.state.gpa}
              onChange={this.createStudentHandler}
              required
            />
            {/* <label>Image Url</label>
        <input
          name="imageUrl"
          type="text"
          value={this.state.imageUrl}
          onChange={this.createStudentHandler}
        /> */}
            {/* <label>Campus</label>
        <input
          name="campus"
          type="text"
          value={this.state.campus}
          onChange={this.createStudentHandler}
          required
        /> */}
          </div>
          <button type="submit" style={{ marginLeft: "150px" }}>
            Submit
          </button>
        </form>
      </div>
    );

    return (
      // <div
      //   style={{
      //     width: "30rem",
      //     backgroundColor: "lightgray",
      //     border: "2px solid black",
      //   }}
      // >
      //   <h3 style={{ backgroundColor: "red", display: "inline-block" }}>
      //     ADD STUDENT FORM
      //   </h3>
      //   <form onSubmit={this.submitStudentHandler}>
      //     <div>
      //       <label>First Name:</label>
      //       <input
      //         type="text"
      //         name="firstName"
      //         value={this.state.firstName}
      //         onChange={this.createStudentHandler}
      //         required
      //       />
      //       <label>Last Name:</label>
      //       <input
      //         name="lastName"
      //         type="text"
      //         value={this.state.lastName}
      //         onChange={this.createStudentHandler}
      //         required
      //       />
      //       <label>Email:</label>
      //       <input
      //         name="email"
      //         type="text"
      //         value={this.state.email}
      //         onChange={this.createStudentHandler}
      //         required
      //       />
      //       <label>GPA: </label>
      //       <input
      //         name="gpa"
      //         type="text"
      //         value={this.state.gpa}
      //         onChange={this.createStudentHandler}
      //         required
      //       />
      //       {/* <label>Image Url</label>
      //       <input
      //         name="imageUrl"
      //         type="text"
      //         value={this.state.imageUrl}
      //         onChange={this.createStudentHandler}
      //       /> */}
      //       {/* <label>Campus</label>
      //       <input
      //         name="campus"
      //         type="text"
      //         value={this.state.campus}
      //         onChange={this.createStudentHandler}
      //         required
      //       /> */}
      //     </div>
      //     <button
      //       type="submit"
      //       style={{ marginLeft: "150px" }}
      //       onClick={this.toggleForm}
      //     >
      //       Submit
      //     </button>
      //   </form>
      // </div>
      <div>
        {this.state.showForm ? (
          formValue
        ) : (
          <button type="button" onClick={this.toggleForm}>
            Add Student
          </button>
        )}
      </div>
    );
  }
}

const mapStateToProps = (state) => state;

const mapDispatchToProps = (dispatch) => {
  return {
    fetchStudents: () => dispatch(fetchStudents()),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(CreateStudent);


*/